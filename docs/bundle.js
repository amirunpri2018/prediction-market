!function(Q){function F(F){for(var U,B,C=F[0],g=F[1],t=0,l=[];t<C.length;t++)B=C[t],I[B]&&l.push(I[B][0]),I[B]=0;for(U in g)Object.prototype.hasOwnProperty.call(g,U)&&(Q[U]=g[U]);for(s&&s(F);l.length;)l.shift()()}var U={},I={2:0};function B(F){if(U[F])return U[F].exports;var I=U[F]={i:F,l:!1,exports:{}};return Q[F].call(I.exports,I,I.exports,B),I.l=!0,I.exports}B.e=function(Q){var F=[],U=I[Q];if(0!==U)if(U)F.push(U[2]);else{var C=new Promise(function(F,B){U=I[Q]=[F,B]});F.push(U[2]=C);var g,t=document.createElement("script");t.charset="utf-8",t.timeout=120,B.nc&&t.setAttribute("nonce",B.nc),t.src=function(Q){return B.p+""+Q+".bundle.js"}(Q),g=function(F){t.onerror=t.onload=null,clearTimeout(s);var U=I[Q];if(0!==U){if(U){var B=F&&("load"===F.type?"missing":F.type),C=F&&F.target&&F.target.src,g=new Error("Loading chunk "+Q+" failed.\n("+B+": "+C+")");g.type=B,g.request=C,U[1](g)}I[Q]=void 0}};var s=setTimeout(function(){g({type:"timeout",target:t})},12e4);t.onerror=t.onload=g,document.head.appendChild(t)}return Promise.all(F)},B.m=Q,B.c=U,B.d=function(Q,F,U){B.o(Q,F)||Object.defineProperty(Q,F,{enumerable:!0,get:U})},B.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},B.t=function(Q,F){if(1&F&&(Q=B(Q)),8&F)return Q;if(4&F&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var U=Object.create(null);if(B.r(U),Object.defineProperty(U,"default",{enumerable:!0,value:Q}),2&F&&"string"!=typeof Q)for(var I in Q)B.d(U,I,function(F){return Q[F]}.bind(null,I));return U},B.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return B.d(F,"a",F),F},B.o=function(Q,F){return Object.prototype.hasOwnProperty.call(Q,F)},B.p="",B.oe=function(Q){throw console.error(Q),Q};var C=window.webpackJsonp=window.webpackJsonp||[],g=C.push.bind(C);C.push=F,C=C.slice();for(var t=0;t<C.length;t++)F(C[t]);var s=g;B(B.s=0)}([function(module,exports,__webpack_require__){eval('__webpack_require__.e(/* import() */ 9).then(__webpack_require__.t.bind(null, 8, 7));\n\nfunction getNetworkName(networkId) {\n  // https://ethereum.stackexchange.com/a/17101\n  return {\n    [0]: "Olympic",\n    [1]: "Mainnet",\n    [2]: "Morden Classic",\n    [3]: "Ropsten",\n    [4]: "Rinkeby",\n    [5]: "Goerli",\n    [6]: "Kotti Classic",\n    [8]: "Ubiq",\n    [42]: "Kovan",\n    [60]: "GoChain",\n    [77]: "Sokol",\n    [99]: "Core",\n    [100]: "xDai",\n    [31337]: "GoChain testnet",\n    [401697]: "Tobalaba",\n    [7762959]: "Musicoin",\n    [61717561]: "Aquachain"\n  }[networkId] || `Network ID ${networkId}`;\n}\n\nfunction getReadOnlyProviderForNetworkId(networkId) {\n  const providerName = {\n    [1]: "mainnet",\n    [3]: "ropsten",\n    [4]: "rinkeby",\n    [5]: "goerli",\n    [42]: "kovan"\n  }[networkId];\n  return providerName == null ? null : `wss://${providerName}.infura.io/ws/v3/d743990732244555a1a0e82d5ab90c7f`;\n}\n\nasync function loadWeb3(networkId) {\n  const {\n    default: Web3\n  } = await Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(10)]).then(__webpack_require__.t.bind(null, 4, 7));\n  const web3InitErrors = [];\n  let web3, account;\n  let foundWeb3 = false;\n\n  for (const [providerType, providerCandidate] of [["injected provider", Web3.givenProvider], ["local websocket", "ws://localhost:8546"], ["local http", "http://localhost:8545"], [`read-only for id ${networkId}`, getReadOnlyProviderForNetworkId(networkId)]]) {\n    try {\n      if (providerCandidate == null) throw new Error("no provider found");\n      if (providerCandidate.enable != null) await providerCandidate.enable();\n      web3 = new Web3(providerCandidate);\n      const web3NetworkId = await web3.eth.net.getId();\n      if (web3NetworkId != networkId) throw new Error(`interface expects ${networkId} but currently connected to ${web3NetworkId}`); // attempt to get the main account here\n      // so that web3 will emit an error if e.g.\n      // the localhost provider cannot be reached\n\n      if (web3.defaultAccount == null) {\n        const accounts = await web3.eth.getAccounts();\n        account = accounts[0] || null;\n      } else account = web3.defaultAccount;\n\n      foundWeb3 = true;\n      break;\n    } catch (e) {\n      web3InitErrors.push([providerType, e]);\n    }\n  }\n\n  if (!foundWeb3) throw new Error(`could not get valid Web3 instance; got following errors:\\n${web3InitErrors.map(([providerCandidate, e]) => `${providerCandidate} -> ${e}`).join("\\n")}`);\n  return {\n    web3,\n    account\n  };\n}\n\nasync function loadBasicData({\n  lmsrAddress,\n  markets\n}, web3, Decimal) {\n  const {\n    soliditySha3\n  } = web3.utils;\n  const [{\n    default: TruffleContract\n  }, {\n    product\n  }, ERC20DetailedArtifact, IDSTokenArtifact, WETH9Artifact, PredictionMarketSystemArtifact, LMSRMarketMakerArtifact] = await Promise.all([Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(3), __webpack_require__.e(11)]).then(__webpack_require__.t.bind(null, 9, 7)), __webpack_require__.e(/* import() */ 15).then(__webpack_require__.bind(null, 7)), __webpack_require__.e(/* import() */ 17).then(__webpack_require__.t.bind(null, 10, 3)), __webpack_require__.e(/* import() */ 18).then(__webpack_require__.t.bind(null, 11, 3)), __webpack_require__.e(/* import() */ 21).then(__webpack_require__.t.bind(null, 12, 3)), __webpack_require__.e(/* import() */ 20).then(__webpack_require__.t.bind(null, 13, 3)), __webpack_require__.e(/* import() */ 19).then(__webpack_require__.t.bind(null, 14, 3))]);\n  const ERC20Detailed = TruffleContract(ERC20DetailedArtifact);\n  const IDSToken = TruffleContract(IDSTokenArtifact);\n  const WETH9 = TruffleContract(WETH9Artifact);\n  const PredictionMarketSystem = TruffleContract(PredictionMarketSystemArtifact);\n  const LMSRMarketMaker = TruffleContract(LMSRMarketMakerArtifact);\n\n  for (const Contract of [ERC20Detailed, IDSToken, WETH9, PredictionMarketSystem, LMSRMarketMaker]) {\n    Contract.setProvider(web3.currentProvider);\n  }\n\n  const lmsrMarketMaker = await LMSRMarketMaker.at(lmsrAddress);\n  const collateral = await __webpack_require__(1)(web3, Decimal, {\n    ERC20Detailed,\n    IDSToken,\n    WETH9\n  }, lmsrMarketMaker);\n  const pmSystem = await PredictionMarketSystem.at((await lmsrMarketMaker.pmSystem()));\n  const atomicOutcomeSlotCount = (await lmsrMarketMaker.atomicOutcomeSlotCount()).toNumber();\n  let curAtomicOutcomeSlotCount = 1;\n\n  for (let i = 0; i < markets.length; i++) {\n    const market = markets[i];\n    const conditionId = await lmsrMarketMaker.conditionIds(i);\n    const numSlots = (await pmSystem.getOutcomeSlotCount(conditionId)).toNumber();\n    if (numSlots === 0) throw new Error(`condition ${conditionId} not set up yet`);\n    if (numSlots !== market.outcomes.length) throw new Error(`condition ${conditionId} outcome slot count ${numSlots} does not match market outcome descriptions array with length ${market.outcomes.length}`);\n    market.marketIndex = i;\n    market.conditionId = conditionId;\n    market.outcomes.forEach((outcome, i) => {\n      outcome.collectionId = soliditySha3({\n        t: "bytes32",\n        v: conditionId\n      }, {\n        t: "uint",\n        v: 1 << i\n      });\n    });\n    curAtomicOutcomeSlotCount *= numSlots;\n  }\n\n  if (curAtomicOutcomeSlotCount !== atomicOutcomeSlotCount) {\n    throw new Error(`mismatch in counted atomic outcome slot ${curAtomicOutcomeSlotCount} and contract reported value ${atomicOutcomeSlotCount}`);\n  }\n\n  const positions = [];\n\n  for (const outcomes of product(...markets.slice().reverse().map(({\n    conditionId,\n    outcomes,\n    marketIndex\n  }) => outcomes.map((outcome, outcomeIndex) => ({ ...outcome,\n    conditionId,\n    marketIndex,\n    outcomeIndex\n  }))))) {\n    const positionId = soliditySha3({\n      t: "address",\n      v: collateral.address\n    }, {\n      t: "uint",\n      v: outcomes.map(({\n        collectionId\n      }) => collectionId).map(id => web3.utils.toBN(id)).reduce((a, b) => a.add(b)).maskn(256)\n    });\n    positions.push({\n      id: positionId,\n      outcomes\n    });\n  }\n\n  positions.forEach((position, i) => {\n    position.positionIndex = i;\n  });\n\n  for (const market of markets) {\n    for (const outcome of market.outcomes) {\n      outcome.positions = [];\n    }\n  }\n\n  for (const position of positions) {\n    for (const outcome of position.outcomes) {\n      markets[outcome.marketIndex].outcomes[outcome.outcomeIndex].positions.push(position);\n    }\n  }\n\n  return {\n    pmSystem,\n    lmsrMarketMaker,\n    collateral,\n    markets,\n    positions\n  };\n}\n\nasync function getCollateralBalance(web3, collateral, account) {\n  const collateralBalance = {};\n  collateralBalance.amount = await collateral.contract.balanceOf(account);\n\n  if (collateral.isWETH) {\n    collateralBalance.unwrappedAmount = web3.utils.toBN((await web3.eth.getBalance(account)));\n    collateralBalance.totalAmount = collateralBalance.amount.add(collateralBalance.unwrappedAmount);\n  } else {\n    collateralBalance.totalAmount = collateralBalance.amount;\n  }\n\n  return collateralBalance;\n}\n\nasync function getLMSRState(web3, pmSystem, lmsrMarketMaker, positions) {\n  const {\n    fromWei\n  } = web3.utils;\n  const [owner, funding, stage, fee, positionBalances] = await Promise.all([lmsrMarketMaker.owner(), lmsrMarketMaker.funding(), lmsrMarketMaker.stage().then(stage => ["Running", "Paused", "Closed"][stage.toNumber()]), lmsrMarketMaker.fee().then(fee => fromWei(fee)), getPositionBalances(pmSystem, positions, lmsrMarketMaker.address)]);\n  return {\n    owner,\n    funding,\n    stage,\n    fee,\n    positionBalances\n  };\n}\n\nasync function getMarketResolutionStates(pmSystem, markets) {\n  return await Promise.all(markets.map(async ({\n    conditionId,\n    outcomes\n  }) => {\n    const payoutDenominator = await pmSystem.payoutDenominator(conditionId);\n\n    if (payoutDenominator.gtn(0)) {\n      const payoutNumerators = await Promise.all(outcomes.map((_, outcomeIndex) => pmSystem.payoutNumerators(conditionId, outcomeIndex)));\n      return {\n        isResolved: true,\n        payoutNumerators,\n        payoutDenominator\n      };\n    } else return {\n      isResolved: false\n    };\n  }));\n}\n\nasync function getPositionBalances(pmSystem, positions, account) {\n  return await Promise.all(positions.map(position => pmSystem.balanceOf(account, position.id)));\n}\n\nasync function getLMSRAllowance(collateral, lmsrMarketMaker, account) {\n  return await collateral.contract.allowance(account, lmsrMarketMaker.address);\n}\n\nPromise.all([__webpack_require__.e(/* import() */ 13).then(__webpack_require__.t.bind(null, 2, 7)), __webpack_require__.e(/* import() */ 8).then(__webpack_require__.t.bind(null, 15, 7)), __webpack_require__.e(/* import() */ 16).then(__webpack_require__.t.bind(null, 3, 7)), __webpack_require__.e(/* import() */ 12).then(__webpack_require__.bind(null, 16)), __webpack_require__.e(/* import() */ 1).then(__webpack_require__.t.bind(null, 5, 7)), Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(1), __webpack_require__.e(6)]).then(__webpack_require__.bind(null, 20)), Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(1), __webpack_require__.e(4)]).then(__webpack_require__.bind(null, 17)), Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(1), __webpack_require__.e(5)]).then(__webpack_require__.bind(null, 18)), __webpack_require__.e(/* import() */ 7).then(__webpack_require__.bind(null, 6))]).then(([{\n  default: React,\n  useState,\n  useEffect\n}, {\n  render\n}, {\n  default: cn\n}, {\n  default: useInterval\n}, {\n  default: Decimal\n}, {\n  default: Markets\n}, {\n  default: BuySection\n}, {\n  default: YourPositions\n}, {\n  default: Spinner\n}]) => {\n  Decimal.config({\n    precision: 80,\n    rounding: Decimal.ROUND_FLOOR\n  });\n  const moduleLoadTime = Date.now();\n\n  function RootComponent() {\n    const [loading, setLoading] = useState("LOADING");\n    const [syncTime, setSyncTime] = useState(moduleLoadTime);\n\n    function triggerSync() {\n      setSyncTime(Date.now());\n    }\n\n    useInterval(triggerSync, 2000);\n    const [networkId, setNetworkId] = useState(null);\n    const [web3, setWeb3] = useState(null);\n    const [account, setAccount] = useState(null);\n    const [pmSystem, setPMSystem] = useState(null);\n    const [lmsrMarketMaker, setLMSRMarketMaker] = useState(null);\n    const [collateral, setCollateral] = useState(null);\n    const [markets, setMarkets] = useState(null);\n    const [positions, setPositions] = useState(null);\n    useEffect(() => {\n      __webpack_require__.e(/* import() */ 14).then(__webpack_require__.t.bind(null, 19, 3)).then(async ({\n        default: config\n      }) => {\n        setNetworkId(config.networkId);\n        const {\n          web3,\n          account\n        } = await loadWeb3(config.networkId);\n        setWeb3(web3);\n        setAccount(account);\n        const {\n          pmSystem,\n          lmsrMarketMaker,\n          collateral,\n          markets,\n          positions\n        } = await loadBasicData(config, web3, Decimal);\n        setPMSystem(pmSystem);\n        setLMSRMarketMaker(lmsrMarketMaker);\n        setCollateral(collateral);\n        setMarkets(markets);\n        setPositions(positions);\n        setLoading("SUCCESS");\n      }).catch(err => {\n        setLoading("FAILURE");\n        throw err;\n      });\n    }, []);\n    const [lmsrState, setLMSRState] = useState(null);\n    const [marketResolutionStates, setMarketResolutionStates] = useState(null);\n    const [collateralBalance, setCollateralBalance] = useState(null);\n    const [positionBalances, setPositionBalances] = useState(null);\n    const [lmsrAllowance, setLMSRAllowance] = useState(null);\n\n    for (const [loader, dependentParams, setter] of [[getLMSRState, [web3, pmSystem, lmsrMarketMaker, positions], setLMSRState], [getMarketResolutionStates, [pmSystem, markets], setMarketResolutionStates], [getCollateralBalance, [web3, collateral, account], setCollateralBalance], [getPositionBalances, [pmSystem, positions, account], setPositionBalances], [getLMSRAllowance, [collateral, lmsrMarketMaker, account], setLMSRAllowance]]) useEffect(() => {\n      if (dependentParams.every(p => p != null)) loader(...dependentParams).then(setter).catch(err => {\n        throw err;\n      });\n    }, [...dependentParams, syncTime]);\n\n    const [marketSelections, setMarketSelections] = useState(null);\n    const [stagedTradeAmounts, setStagedTradeAmounts] = useState(null);\n    const [stagedTransactionType, setStagedTransactionType] = useState(null);\n    const [ongoingTransactionType, setOngoingTransactionType] = useState(null);\n\n    function asWrappedTransaction(wrappedTransactionType, transactionFn, setError) {\n      return async function wrappedAction() {\n        if (ongoingTransactionType != null) {\n          throw new Error(`Attempted to ${wrappedTransactionType} while transaction to ${ongoingTransactionType} is ongoing`);\n        }\n\n        try {\n          setOngoingTransactionType(wrappedTransactionType);\n          await transactionFn();\n        } catch (e) {\n          setError(e);\n          throw e;\n        } finally {\n          setOngoingTransactionType(null);\n          triggerSync();\n        }\n      };\n    }\n\n    if (loading === "SUCCESS") return React.createElement("div", {\n      className: cn("page")\n    }, React.createElement("h1", {\n      className: cn("page-title")\n    }, "Gnosis PM 2.0 Experiments"), React.createElement("section", {\n      className: cn("section", "market-section")\n    }, React.createElement(Markets, {\n      markets,\n      marketResolutionStates,\n      positions,\n      lmsrState,\n      marketSelections,\n      setMarketSelections,\n      stagedTradeAmounts\n    })), React.createElement("div", {\n      className: cn("separator")\n    }), React.createElement("section", {\n      className: cn("section", "position-section")\n    }, account == null ? React.createElement(React.Fragment, null, React.createElement("h2", {\n      className: cn("heading")\n    }, "Note"), React.createElement("p", null, "Please connect an Ethereum provider to", " ", getNetworkName(networkId), " to interact with this market.")) : React.createElement(React.Fragment, null, React.createElement("h2", {\n      className: cn("heading")\n    }, "Manage Positions"), React.createElement(BuySection, {\n      account,\n      markets,\n      positions,\n      collateral,\n      collateralBalance,\n      lmsrMarketMaker,\n      lmsrState,\n      lmsrAllowance,\n      marketSelections,\n      stagedTradeAmounts,\n      setStagedTradeAmounts,\n      stagedTransactionType,\n      setStagedTransactionType,\n      ongoingTransactionType,\n      asWrappedTransaction\n    }), React.createElement(YourPositions, {\n      account,\n      pmSystem,\n      markets,\n      marketResolutionStates,\n      positions,\n      collateral,\n      lmsrMarketMaker,\n      lmsrState,\n      positionBalances,\n      stagedTradeAmounts,\n      setStagedTradeAmounts,\n      stagedTransactionType,\n      setStagedTransactionType,\n      ongoingTransactionType,\n      asWrappedTransaction\n    }))));\n    if (loading === "LOADING") return React.createElement("div", {\n      className: cn("loading-page")\n    }, React.createElement(Spinner, {\n      centered: true,\n      inverted: true,\n      width: 100,\n      height: 100\n    }));\n    if (loading === "FAILURE") return React.createElement("div", {\n      className: cn("failure-page")\n    }, React.createElement("h2", null, "Failed to load \\uD83D\\uDE1E"), React.createElement("h3", null, "Please check the following:"), React.createElement("ul", null, React.createElement("li", null, "Connect to correct network (", getNetworkName(networkId), ")"), React.createElement("li", null, "Install/Unlock Metamask")));\n  }\n\n  const rootElement = document.getElementById("root");\n  render(React.createElement(RootComponent, null), rootElement);\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports){eval('module.exports = async function getCollateralInfo(web3, Decimal, {\n  ERC20Detailed,\n  IDSToken,\n  WETH9\n}, lmsrMarketMaker) {\n  const {\n    hexToUtf8\n  } = web3.utils;\n  const collateral = {};\n  collateral.address = await lmsrMarketMaker.collateralToken();\n  collateral.contract = await ERC20Detailed.at(collateral.address);\n\n  try {\n    collateral.name = await collateral.contract.name();\n    collateral.symbol = await collateral.contract.symbol();\n    collateral.decimals = (await collateral.contract.decimals()).toNumber();\n  } catch (e) {\n    collateral.contract = await IDSToken.at(collateral.address);\n    collateral.name = hexToUtf8((await collateral.contract.name()));\n    collateral.symbol = hexToUtf8((await collateral.contract.symbol()));\n    collateral.decimals = (await collateral.contract.decimals()).toNumber();\n  }\n\n  collateral.toUnitsMultiplier = new Decimal(10).pow(collateral.decimals);\n  collateral.fromUnitsMultiplier = new Decimal(10).pow(-collateral.decimals);\n  collateral.isWETH = collateral.name === "Wrapped Ether" && collateral.symbol === "WETH" && collateral.decimals === 18;\n  collateral.isDAI = collateral.name === "Dai Stablecoin v1.0" && collateral.symbol === "DAI" && collateral.decimals === 18;\n\n  if (collateral.isWETH) {\n    collateral.symbol = "\\u039E";\n    collateral.contract = await WETH9.at(collateral.address);\n  } else if (collateral.isDAI) {\n    collateral.symbol = "\\u25C8";\n  }\n\n  return collateral;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMvY29sbGF0ZXJhbC1pbmZvLmpzP2ZkZjciXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImdldENvbGxhdGVyYWxJbmZvIiwid2ViMyIsIkRlY2ltYWwiLCJFUkMyMERldGFpbGVkIiwiSURTVG9rZW4iLCJXRVRIOSIsImxtc3JNYXJrZXRNYWtlciIsImhleFRvVXRmOCIsInV0aWxzIiwiY29sbGF0ZXJhbCIsImFkZHJlc3MiLCJjb2xsYXRlcmFsVG9rZW4iLCJjb250cmFjdCIsImF0IiwibmFtZSIsInN5bWJvbCIsImRlY2ltYWxzIiwidG9OdW1iZXIiLCJlIiwidG9Vbml0c011bHRpcGxpZXIiLCJwb3ciLCJmcm9tVW5pdHNNdWx0aXBsaWVyIiwiaXNXRVRIIiwiaXNEQUkiXSwibWFwcGluZ3MiOiJBQUFBQSxNQUFNLENBQUNDLE9BQVAsR0FBaUIsZUFBZUMsaUJBQWYsQ0FDZkMsSUFEZSxFQUVmQyxPQUZlLEVBR2Y7QUFBRUMsZUFBRjtBQUFpQkMsVUFBakI7QUFBMkJDO0FBQTNCLENBSGUsRUFJZkMsZUFKZSxFQUtmO0FBQ0EsUUFBTTtBQUFFQztBQUFGLE1BQWdCTixJQUFJLENBQUNPLEtBQTNCO0FBQ0EsUUFBTUMsVUFBVSxHQUFHLEVBQW5CO0FBQ0FBLFlBQVUsQ0FBQ0MsT0FBWCxHQUFxQixNQUFNSixlQUFlLENBQUNLLGVBQWhCLEVBQTNCO0FBQ0FGLFlBQVUsQ0FBQ0csUUFBWCxHQUFzQixNQUFNVCxhQUFhLENBQUNVLEVBQWQsQ0FBaUJKLFVBQVUsQ0FBQ0MsT0FBNUIsQ0FBNUI7O0FBRUEsTUFBSTtBQUNGRCxjQUFVLENBQUNLLElBQVgsR0FBa0IsTUFBTUwsVUFBVSxDQUFDRyxRQUFYLENBQW9CRSxJQUFwQixFQUF4QjtBQUNBTCxjQUFVLENBQUNNLE1BQVgsR0FBb0IsTUFBTU4sVUFBVSxDQUFDRyxRQUFYLENBQW9CRyxNQUFwQixFQUExQjtBQUNBTixjQUFVLENBQUNPLFFBQVgsR0FBc0IsQ0FBQyxNQUFNUCxVQUFVLENBQUNHLFFBQVgsQ0FBb0JJLFFBQXBCLEVBQVAsRUFBdUNDLFFBQXZDLEVBQXRCO0FBQ0QsR0FKRCxDQUlFLE9BQU9DLENBQVAsRUFBVTtBQUNWVCxjQUFVLENBQUNHLFFBQVgsR0FBc0IsTUFBTVIsUUFBUSxDQUFDUyxFQUFULENBQVlKLFVBQVUsQ0FBQ0MsT0FBdkIsQ0FBNUI7QUFDQUQsY0FBVSxDQUFDSyxJQUFYLEdBQWtCUCxTQUFTLEVBQUMsTUFBTUUsVUFBVSxDQUFDRyxRQUFYLENBQW9CRSxJQUFwQixFQUFQLEVBQTNCO0FBQ0FMLGNBQVUsQ0FBQ00sTUFBWCxHQUFvQlIsU0FBUyxFQUFDLE1BQU1FLFVBQVUsQ0FBQ0csUUFBWCxDQUFvQkcsTUFBcEIsRUFBUCxFQUE3QjtBQUNBTixjQUFVLENBQUNPLFFBQVgsR0FBc0IsQ0FBQyxNQUFNUCxVQUFVLENBQUNHLFFBQVgsQ0FBb0JJLFFBQXBCLEVBQVAsRUFBdUNDLFFBQXZDLEVBQXRCO0FBQ0Q7O0FBRURSLFlBQVUsQ0FBQ1UsaUJBQVgsR0FBK0IsSUFBSWpCLE9BQUosQ0FBWSxFQUFaLEVBQWdCa0IsR0FBaEIsQ0FBb0JYLFVBQVUsQ0FBQ08sUUFBL0IsQ0FBL0I7QUFDQVAsWUFBVSxDQUFDWSxtQkFBWCxHQUFpQyxJQUFJbkIsT0FBSixDQUFZLEVBQVosRUFBZ0JrQixHQUFoQixDQUFvQixDQUFDWCxVQUFVLENBQUNPLFFBQWhDLENBQWpDO0FBRUFQLFlBQVUsQ0FBQ2EsTUFBWCxHQUNFYixVQUFVLENBQUNLLElBQVgsS0FBb0IsZUFBcEIsSUFDQUwsVUFBVSxDQUFDTSxNQUFYLEtBQXNCLE1BRHRCLElBRUFOLFVBQVUsQ0FBQ08sUUFBWCxLQUF3QixFQUgxQjtBQUtBUCxZQUFVLENBQUNjLEtBQVgsR0FDRWQsVUFBVSxDQUFDSyxJQUFYLEtBQW9CLHFCQUFwQixJQUNBTCxVQUFVLENBQUNNLE1BQVgsS0FBc0IsS0FEdEIsSUFFQU4sVUFBVSxDQUFDTyxRQUFYLEtBQXdCLEVBSDFCOztBQUtBLE1BQUlQLFVBQVUsQ0FBQ2EsTUFBZixFQUF1QjtBQUNyQmIsY0FBVSxDQUFDTSxNQUFYLEdBQW9CLFFBQXBCO0FBQ0FOLGNBQVUsQ0FBQ0csUUFBWCxHQUFzQixNQUFNUCxLQUFLLENBQUNRLEVBQU4sQ0FBU0osVUFBVSxDQUFDQyxPQUFwQixDQUE1QjtBQUNELEdBSEQsTUFHTyxJQUFJRCxVQUFVLENBQUNjLEtBQWYsRUFBc0I7QUFDM0JkLGNBQVUsQ0FBQ00sTUFBWCxHQUFvQixRQUFwQjtBQUNEOztBQUVELFNBQU9OLFVBQVA7QUFDRCxDQTNDRCIsImZpbGUiOiIxLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbiBnZXRDb2xsYXRlcmFsSW5mbyhcbiAgd2ViMyxcbiAgRGVjaW1hbCxcbiAgeyBFUkMyMERldGFpbGVkLCBJRFNUb2tlbiwgV0VUSDkgfSxcbiAgbG1zck1hcmtldE1ha2VyXG4pIHtcbiAgY29uc3QgeyBoZXhUb1V0ZjggfSA9IHdlYjMudXRpbHM7XG4gIGNvbnN0IGNvbGxhdGVyYWwgPSB7fTtcbiAgY29sbGF0ZXJhbC5hZGRyZXNzID0gYXdhaXQgbG1zck1hcmtldE1ha2VyLmNvbGxhdGVyYWxUb2tlbigpO1xuICBjb2xsYXRlcmFsLmNvbnRyYWN0ID0gYXdhaXQgRVJDMjBEZXRhaWxlZC5hdChjb2xsYXRlcmFsLmFkZHJlc3MpO1xuXG4gIHRyeSB7XG4gICAgY29sbGF0ZXJhbC5uYW1lID0gYXdhaXQgY29sbGF0ZXJhbC5jb250cmFjdC5uYW1lKCk7XG4gICAgY29sbGF0ZXJhbC5zeW1ib2wgPSBhd2FpdCBjb2xsYXRlcmFsLmNvbnRyYWN0LnN5bWJvbCgpO1xuICAgIGNvbGxhdGVyYWwuZGVjaW1hbHMgPSAoYXdhaXQgY29sbGF0ZXJhbC5jb250cmFjdC5kZWNpbWFscygpKS50b051bWJlcigpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29sbGF0ZXJhbC5jb250cmFjdCA9IGF3YWl0IElEU1Rva2VuLmF0KGNvbGxhdGVyYWwuYWRkcmVzcyk7XG4gICAgY29sbGF0ZXJhbC5uYW1lID0gaGV4VG9VdGY4KGF3YWl0IGNvbGxhdGVyYWwuY29udHJhY3QubmFtZSgpKTtcbiAgICBjb2xsYXRlcmFsLnN5bWJvbCA9IGhleFRvVXRmOChhd2FpdCBjb2xsYXRlcmFsLmNvbnRyYWN0LnN5bWJvbCgpKTtcbiAgICBjb2xsYXRlcmFsLmRlY2ltYWxzID0gKGF3YWl0IGNvbGxhdGVyYWwuY29udHJhY3QuZGVjaW1hbHMoKSkudG9OdW1iZXIoKTtcbiAgfVxuXG4gIGNvbGxhdGVyYWwudG9Vbml0c011bHRpcGxpZXIgPSBuZXcgRGVjaW1hbCgxMCkucG93KGNvbGxhdGVyYWwuZGVjaW1hbHMpO1xuICBjb2xsYXRlcmFsLmZyb21Vbml0c011bHRpcGxpZXIgPSBuZXcgRGVjaW1hbCgxMCkucG93KC1jb2xsYXRlcmFsLmRlY2ltYWxzKTtcblxuICBjb2xsYXRlcmFsLmlzV0VUSCA9XG4gICAgY29sbGF0ZXJhbC5uYW1lID09PSBcIldyYXBwZWQgRXRoZXJcIiAmJlxuICAgIGNvbGxhdGVyYWwuc3ltYm9sID09PSBcIldFVEhcIiAmJlxuICAgIGNvbGxhdGVyYWwuZGVjaW1hbHMgPT09IDE4O1xuXG4gIGNvbGxhdGVyYWwuaXNEQUkgPVxuICAgIGNvbGxhdGVyYWwubmFtZSA9PT0gXCJEYWkgU3RhYmxlY29pbiB2MS4wXCIgJiZcbiAgICBjb2xsYXRlcmFsLnN5bWJvbCA9PT0gXCJEQUlcIiAmJlxuICAgIGNvbGxhdGVyYWwuZGVjaW1hbHMgPT09IDE4O1xuXG4gIGlmIChjb2xsYXRlcmFsLmlzV0VUSCkge1xuICAgIGNvbGxhdGVyYWwuc3ltYm9sID0gXCJcXHUwMzlFXCI7XG4gICAgY29sbGF0ZXJhbC5jb250cmFjdCA9IGF3YWl0IFdFVEg5LmF0KGNvbGxhdGVyYWwuYWRkcmVzcyk7XG4gIH0gZWxzZSBpZiAoY29sbGF0ZXJhbC5pc0RBSSkge1xuICAgIGNvbGxhdGVyYWwuc3ltYm9sID0gXCJcXHUyNUM4XCI7XG4gIH1cblxuICByZXR1cm4gY29sbGF0ZXJhbDtcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n')}]);